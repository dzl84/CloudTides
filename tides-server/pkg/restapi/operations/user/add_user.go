// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddUserHandlerFunc turns a function with the right signature into a add user handler
type AddUserHandlerFunc func(AddUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddUserHandlerFunc) Handle(params AddUserParams) middleware.Responder {
	return fn(params)
}

// AddUserHandler interface for that can handle valid add user params
type AddUserHandler interface {
	Handle(AddUserParams) middleware.Responder
}

// NewAddUser creates a new http.Handler for the add user operation
func NewAddUser(ctx *middleware.Context, handler AddUserHandler) *AddUser {
	return &AddUser{Context: ctx, Handler: handler}
}

/* AddUser swagger:route POST /user user addUser

add User

*/
type AddUser struct {
	Context *middleware.Context
	Handler AddUserHandler
}

func (o *AddUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddUserBody add user body
//
// swagger:model AddUserBody
type AddUserBody struct {

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// role
	Role string `json:"role,omitempty"`
}

// Validate validates this add user body
func (o *AddUserBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add user body based on context it is used
func (o *AddUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddUserBody) UnmarshalBinary(b []byte) error {
	var res AddUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddUserForbiddenBody add user forbidden body
//
// swagger:model AddUserForbiddenBody
type AddUserForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add user forbidden body
func (o *AddUserForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add user forbidden body based on context it is used
func (o *AddUserForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddUserForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddUserForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AddUserForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddUserOKBody add user o k body
//
// swagger:model AddUserOKBody
type AddUserOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add user o k body
func (o *AddUserOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add user o k body based on context it is used
func (o *AddUserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddUserOKBody) UnmarshalBinary(b []byte) error {
	var res AddUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
