// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SendVerificationHandlerFunc turns a function with the right signature into a send verification handler
type SendVerificationHandlerFunc func(SendVerificationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendVerificationHandlerFunc) Handle(params SendVerificationParams) middleware.Responder {
	return fn(params)
}

// SendVerificationHandler interface for that can handle valid send verification params
type SendVerificationHandler interface {
	Handle(SendVerificationParams) middleware.Responder
}

// NewSendVerification creates a new http.Handler for the send verification operation
func NewSendVerification(ctx *middleware.Context, handler SendVerificationHandler) *SendVerification {
	return &SendVerification{Context: ctx, Handler: handler}
}

/* SendVerification swagger:route POST /users/reset/verify user sendVerification

send verification

*/
type SendVerification struct {
	Context *middleware.Context
	Handler SendVerificationHandler
}

func (o *SendVerification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSendVerificationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SendVerificationBadRequestBody send verification bad request body
//
// swagger:model SendVerificationBadRequestBody
type SendVerificationBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this send verification bad request body
func (o *SendVerificationBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send verification bad request body based on context it is used
func (o *SendVerificationBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendVerificationBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendVerificationBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SendVerificationBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SendVerificationBody send verification body
//
// swagger:model SendVerificationBody
type SendVerificationBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this send verification body
func (o *SendVerificationBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send verification body based on context it is used
func (o *SendVerificationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendVerificationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendVerificationBody) UnmarshalBinary(b []byte) error {
	var res SendVerificationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SendVerificationOKBody send verification o k body
//
// swagger:model SendVerificationOKBody
type SendVerificationOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this send verification o k body
func (o *SendVerificationOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send verification o k body based on context it is used
func (o *SendVerificationOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendVerificationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendVerificationOKBody) UnmarshalBinary(b []byte) error {
	var res SendVerificationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
