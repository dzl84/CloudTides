// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListUserOfOrgHandlerFunc turns a function with the right signature into a list user of org handler
type ListUserOfOrgHandlerFunc func(ListUserOfOrgParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUserOfOrgHandlerFunc) Handle(params ListUserOfOrgParams) middleware.Responder {
	return fn(params)
}

// ListUserOfOrgHandler interface for that can handle valid list user of org params
type ListUserOfOrgHandler interface {
	Handle(ListUserOfOrgParams) middleware.Responder
}

// NewListUserOfOrg creates a new http.Handler for the list user of org operation
func NewListUserOfOrg(ctx *middleware.Context, handler ListUserOfOrgHandler) *ListUserOfOrg {
	return &ListUserOfOrg{Context: ctx, Handler: handler}
}

/* ListUserOfOrg swagger:route GET /user/{orgName} user listUserOfOrg

list User of Org

*/
type ListUserOfOrg struct {
	Context *middleware.Context
	Handler ListUserOfOrgHandler
}

func (o *ListUserOfOrg) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListUserOfOrgParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListUserOfOrgOKBodyItems0 list user of org o k body items0
//
// swagger:model ListUserOfOrgOKBodyItems0
type ListUserOfOrgOKBodyItems0 struct {

	// email
	Email string `json:"email,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org name
	OrgName string `json:"orgName,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// role
	Role string `json:"role,omitempty"`
}

// Validate validates this list user of org o k body items0
func (o *ListUserOfOrgOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list user of org o k body items0 based on context it is used
func (o *ListUserOfOrgOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListUserOfOrgOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUserOfOrgOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListUserOfOrgOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
