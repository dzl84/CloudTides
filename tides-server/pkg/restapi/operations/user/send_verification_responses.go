// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SendVerificationOKCode is the HTTP code returned for type SendVerificationOK
const SendVerificationOKCode int = 200

/*SendVerificationOK OK

swagger:response sendVerificationOK
*/
type SendVerificationOK struct {

	/*
	  In: Body
	*/
	Payload *SendVerificationOKBody `json:"body,omitempty"`
}

// NewSendVerificationOK creates SendVerificationOK with default headers values
func NewSendVerificationOK() *SendVerificationOK {

	return &SendVerificationOK{}
}

// WithPayload adds the payload to the send verification o k response
func (o *SendVerificationOK) WithPayload(payload *SendVerificationOKBody) *SendVerificationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send verification o k response
func (o *SendVerificationOK) SetPayload(payload *SendVerificationOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendVerificationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SendVerificationBadRequestCode is the HTTP code returned for type SendVerificationBadRequest
const SendVerificationBadRequestCode int = 400

/*SendVerificationBadRequest bad request

swagger:response sendVerificationBadRequest
*/
type SendVerificationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *SendVerificationBadRequestBody `json:"body,omitempty"`
}

// NewSendVerificationBadRequest creates SendVerificationBadRequest with default headers values
func NewSendVerificationBadRequest() *SendVerificationBadRequest {

	return &SendVerificationBadRequest{}
}

// WithPayload adds the payload to the send verification bad request response
func (o *SendVerificationBadRequest) WithPayload(payload *SendVerificationBadRequestBody) *SendVerificationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send verification bad request response
func (o *SendVerificationBadRequest) SetPayload(payload *SendVerificationBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendVerificationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
