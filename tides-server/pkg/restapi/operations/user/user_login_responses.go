// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// UserLoginOKCode is the HTTP code returned for type UserLoginOK
const UserLoginOKCode int = 200

/*UserLoginOK returns user info

swagger:response userLoginOK
*/
type UserLoginOK struct {

	/*
	  In: Body
	*/
	Payload *UserLoginOKBody `json:"body,omitempty"`
}

// NewUserLoginOK creates UserLoginOK with default headers values
func NewUserLoginOK() *UserLoginOK {

	return &UserLoginOK{}
}

// WithPayload adds the payload to the user login o k response
func (o *UserLoginOK) WithPayload(payload *UserLoginOKBody) *UserLoginOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user login o k response
func (o *UserLoginOK) SetPayload(payload *UserLoginOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserLoginOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserLoginUnauthorizedCode is the HTTP code returned for type UserLoginUnauthorized
const UserLoginUnauthorizedCode int = 401

/*UserLoginUnauthorized Unauthorized

swagger:response userLoginUnauthorized
*/
type UserLoginUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *UserLoginUnauthorizedBody `json:"body,omitempty"`
}

// NewUserLoginUnauthorized creates UserLoginUnauthorized with default headers values
func NewUserLoginUnauthorized() *UserLoginUnauthorized {

	return &UserLoginUnauthorized{}
}

// WithPayload adds the payload to the user login unauthorized response
func (o *UserLoginUnauthorized) WithPayload(payload *UserLoginUnauthorizedBody) *UserLoginUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user login unauthorized response
func (o *UserLoginUnauthorized) SetPayload(payload *UserLoginUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserLoginUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
