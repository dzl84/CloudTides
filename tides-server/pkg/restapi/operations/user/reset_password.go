// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResetPasswordHandlerFunc turns a function with the right signature into a reset password handler
type ResetPasswordHandlerFunc func(ResetPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ResetPasswordHandlerFunc) Handle(params ResetPasswordParams) middleware.Responder {
	return fn(params)
}

// ResetPasswordHandler interface for that can handle valid reset password params
type ResetPasswordHandler interface {
	Handle(ResetPasswordParams) middleware.Responder
}

// NewResetPassword creates a new http.Handler for the reset password operation
func NewResetPassword(ctx *middleware.Context, handler ResetPasswordHandler) *ResetPassword {
	return &ResetPassword{Context: ctx, Handler: handler}
}

/* ResetPassword swagger:route POST /users/reset user resetPassword

reset password

*/
type ResetPassword struct {
	Context *middleware.Context
	Handler ResetPasswordHandler
}

func (o *ResetPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewResetPasswordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ResetPasswordBadRequestBody reset password bad request body
//
// swagger:model ResetPasswordBadRequestBody
type ResetPasswordBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this reset password bad request body
func (o *ResetPasswordBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reset password bad request body based on context it is used
func (o *ResetPasswordBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResetPasswordBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResetPasswordBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ResetPasswordBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ResetPasswordBody reset password body
//
// swagger:model ResetPasswordBody
type ResetPasswordBody struct {

	// new password
	NewPassword string `json:"newPassword,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// verification code
	VerificationCode string `json:"verificationCode,omitempty"`
}

// Validate validates this reset password body
func (o *ResetPasswordBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reset password body based on context it is used
func (o *ResetPasswordBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResetPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResetPasswordBody) UnmarshalBinary(b []byte) error {
	var res ResetPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ResetPasswordOKBody reset password o k body
//
// swagger:model ResetPasswordOKBody
type ResetPasswordOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this reset password o k body
func (o *ResetPasswordOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reset password o k body based on context it is used
func (o *ResetPasswordOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResetPasswordOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResetPasswordOKBody) UnmarshalBinary(b []byte) error {
	var res ResetPasswordOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
