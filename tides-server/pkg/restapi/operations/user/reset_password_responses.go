// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ResetPasswordOKCode is the HTTP code returned for type ResetPasswordOK
const ResetPasswordOKCode int = 200

/*ResetPasswordOK OK

swagger:response resetPasswordOK
*/
type ResetPasswordOK struct {

	/*
	  In: Body
	*/
	Payload *ResetPasswordOKBody `json:"body,omitempty"`
}

// NewResetPasswordOK creates ResetPasswordOK with default headers values
func NewResetPasswordOK() *ResetPasswordOK {

	return &ResetPasswordOK{}
}

// WithPayload adds the payload to the reset password o k response
func (o *ResetPasswordOK) WithPayload(payload *ResetPasswordOKBody) *ResetPasswordOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reset password o k response
func (o *ResetPasswordOK) SetPayload(payload *ResetPasswordOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResetPasswordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ResetPasswordBadRequestCode is the HTTP code returned for type ResetPasswordBadRequest
const ResetPasswordBadRequestCode int = 400

/*ResetPasswordBadRequest bad request

swagger:response resetPasswordBadRequest
*/
type ResetPasswordBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ResetPasswordBadRequestBody `json:"body,omitempty"`
}

// NewResetPasswordBadRequest creates ResetPasswordBadRequest with default headers values
func NewResetPasswordBadRequest() *ResetPasswordBadRequest {

	return &ResetPasswordBadRequest{}
}

// WithPayload adds the payload to the reset password bad request response
func (o *ResetPasswordBadRequest) WithPayload(payload *ResetPasswordBadRequestBody) *ResetPasswordBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reset password bad request response
func (o *ResetPasswordBadRequest) SetPayload(payload *ResetPasswordBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResetPasswordBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
