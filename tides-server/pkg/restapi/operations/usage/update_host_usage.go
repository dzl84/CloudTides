// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateHostUsageHandlerFunc turns a function with the right signature into a update host usage handler
type UpdateHostUsageHandlerFunc func(UpdateHostUsageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateHostUsageHandlerFunc) Handle(params UpdateHostUsageParams) middleware.Responder {
	return fn(params)
}

// UpdateHostUsageHandler interface for that can handle valid update host usage params
type UpdateHostUsageHandler interface {
	Handle(UpdateHostUsageParams) middleware.Responder
}

// NewUpdateHostUsage creates a new http.Handler for the update host usage operation
func NewUpdateHostUsage(ctx *middleware.Context, handler UpdateHostUsageHandler) *UpdateHostUsage {
	return &UpdateHostUsage{Context: ctx, Handler: handler}
}

/*UpdateHostUsage swagger:route PUT /usage/updateHost usage updateHostUsage

update host usage info

*/
type UpdateHostUsage struct {
	Context *middleware.Context
	Handler UpdateHostUsageHandler
}

func (o *UpdateHostUsage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateHostUsageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateHostUsageBody update host usage body
//
// swagger:model UpdateHostUsageBody
type UpdateHostUsageBody struct {

	// current CPU
	CurrentCPU float64 `json:"currentCPU,omitempty"`

	// current RAM
	CurrentRAM float64 `json:"currentRAM,omitempty"`

	// host address
	HostAddress string `json:"hostAddress,omitempty"`

	// host name
	HostName string `json:"hostName,omitempty"`
}

// Validate validates this update host usage body
func (o *UpdateHostUsageBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateHostUsageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateHostUsageBody) UnmarshalBinary(b []byte) error {
	var res UpdateHostUsageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateHostUsageOKBody update host usage o k body
//
// swagger:model UpdateHostUsageOKBody
type UpdateHostUsageOKBody struct {

	// message
	// Enum: [host usage recorded]
	Message string `json:"message,omitempty"`
}

// Validate validates this update host usage o k body
func (o *UpdateHostUsageOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateHostUsageOKBodyTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["host usage recorded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateHostUsageOKBodyTypeMessagePropEnum = append(updateHostUsageOKBodyTypeMessagePropEnum, v)
	}
}

const (

	// UpdateHostUsageOKBodyMessageHostUsageRecorded captures enum value "host usage recorded"
	UpdateHostUsageOKBodyMessageHostUsageRecorded string = "host usage recorded"
)

// prop value enum
func (o *UpdateHostUsageOKBody) validateMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateHostUsageOKBodyTypeMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *UpdateHostUsageOKBody) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(o.Message) { // not required
		return nil
	}

	// value enum
	if err := o.validateMessageEnum("updateHostUsageOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateHostUsageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateHostUsageOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateHostUsageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
