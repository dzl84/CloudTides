// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// UpdateResourceUsageOKCode is the HTTP code returned for type UpdateResourceUsageOK
const UpdateResourceUsageOKCode int = 200

/*UpdateResourceUsageOK OK

swagger:response updateResourceUsageOK
*/
type UpdateResourceUsageOK struct {

	/*
	  In: Body
	*/
	Payload *UpdateResourceUsageOKBody `json:"body,omitempty"`
}

// NewUpdateResourceUsageOK creates UpdateResourceUsageOK with default headers values
func NewUpdateResourceUsageOK() *UpdateResourceUsageOK {

	return &UpdateResourceUsageOK{}
}

// WithPayload adds the payload to the update resource usage o k response
func (o *UpdateResourceUsageOK) WithPayload(payload *UpdateResourceUsageOKBody) *UpdateResourceUsageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update resource usage o k response
func (o *UpdateResourceUsageOK) SetPayload(payload *UpdateResourceUsageOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateResourceUsageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateResourceUsageNotFoundCode is the HTTP code returned for type UpdateResourceUsageNotFound
const UpdateResourceUsageNotFoundCode int = 404

/*UpdateResourceUsageNotFound resource not found

swagger:response updateResourceUsageNotFound
*/
type UpdateResourceUsageNotFound struct {
}

// NewUpdateResourceUsageNotFound creates UpdateResourceUsageNotFound with default headers values
func NewUpdateResourceUsageNotFound() *UpdateResourceUsageNotFound {

	return &UpdateResourceUsageNotFound{}
}

// WriteResponse to the client
func (o *UpdateResourceUsageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
