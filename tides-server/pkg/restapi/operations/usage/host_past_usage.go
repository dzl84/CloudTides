// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HostPastUsageHandlerFunc turns a function with the right signature into a host past usage handler
type HostPastUsageHandlerFunc func(HostPastUsageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HostPastUsageHandlerFunc) Handle(params HostPastUsageParams) middleware.Responder {
	return fn(params)
}

// HostPastUsageHandler interface for that can handle valid host past usage params
type HostPastUsageHandler interface {
	Handle(HostPastUsageParams) middleware.Responder
}

// NewHostPastUsage creates a new http.Handler for the host past usage operation
func NewHostPastUsage(ctx *middleware.Context, handler HostPastUsageHandler) *HostPastUsage {
	return &HostPastUsage{Context: ctx, Handler: handler}
}

/*HostPastUsage swagger:route GET /usage/getUsage usage hostPastUsage

get host usage info during last period

*/
type HostPastUsage struct {
	Context *middleware.Context
	Handler HostPastUsageHandler
}

func (o *HostPastUsage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewHostPastUsageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
