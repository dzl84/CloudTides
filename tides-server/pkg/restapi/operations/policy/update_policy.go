// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePolicyHandlerFunc turns a function with the right signature into a update policy handler
type UpdatePolicyHandlerFunc func(UpdatePolicyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePolicyHandlerFunc) Handle(params UpdatePolicyParams) middleware.Responder {
	return fn(params)
}

// UpdatePolicyHandler interface for that can handle valid update policy params
type UpdatePolicyHandler interface {
	Handle(UpdatePolicyParams) middleware.Responder
}

// NewUpdatePolicy creates a new http.Handler for the update policy operation
func NewUpdatePolicy(ctx *middleware.Context, handler UpdatePolicyHandler) *UpdatePolicy {
	return &UpdatePolicy{Context: ctx, Handler: handler}
}

/*UpdatePolicy swagger:route PUT /policy/update policy updatePolicy

update a policy

*/
type UpdatePolicy struct {
	Context *middleware.Context
	Handler UpdatePolicyHandler
}

func (o *UpdatePolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdatePolicyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdatePolicyBody update policy body
//
// swagger:model UpdatePolicyBody
type UpdatePolicyBody struct {

	// Id
	ID int64 `json:"Id,omitempty"`

	// account type
	// Enum: [accManager boinc]
	AccountType string `json:"accountType,omitempty"`

	// deploy type
	// Enum: [K8S VM]
	DeployType string `json:"deployType,omitempty"`

	// idle
	Idle string `json:"idle,omitempty"`

	// is destroy
	IsDestroy bool `json:"isDestroy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID int64 `json:"projectId,omitempty"`

	// template Id
	TemplateID int64 `json:"templateId,omitempty"`

	// threshold
	Threshold string `json:"threshold,omitempty"`
}

// Validate validates this update policy body
func (o *UpdatePolicyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeployType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updatePolicyBodyTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accManager","boinc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updatePolicyBodyTypeAccountTypePropEnum = append(updatePolicyBodyTypeAccountTypePropEnum, v)
	}
}

const (

	// UpdatePolicyBodyAccountTypeAccManager captures enum value "accManager"
	UpdatePolicyBodyAccountTypeAccManager string = "accManager"

	// UpdatePolicyBodyAccountTypeBoinc captures enum value "boinc"
	UpdatePolicyBodyAccountTypeBoinc string = "boinc"
)

// prop value enum
func (o *UpdatePolicyBody) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updatePolicyBodyTypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePolicyBody) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountType) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccountTypeEnum("reqBody"+"."+"accountType", "body", o.AccountType); err != nil {
		return err
	}

	return nil
}

var updatePolicyBodyTypeDeployTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["K8S","VM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updatePolicyBodyTypeDeployTypePropEnum = append(updatePolicyBodyTypeDeployTypePropEnum, v)
	}
}

const (

	// UpdatePolicyBodyDeployTypeK8S captures enum value "K8S"
	UpdatePolicyBodyDeployTypeK8S string = "K8S"

	// UpdatePolicyBodyDeployTypeVM captures enum value "VM"
	UpdatePolicyBodyDeployTypeVM string = "VM"
)

// prop value enum
func (o *UpdatePolicyBody) validateDeployTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updatePolicyBodyTypeDeployTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePolicyBody) validateDeployType(formats strfmt.Registry) error {

	if swag.IsZero(o.DeployType) { // not required
		return nil
	}

	// value enum
	if err := o.validateDeployTypeEnum("reqBody"+"."+"deployType", "body", o.DeployType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePolicyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePolicyBody) UnmarshalBinary(b []byte) error {
	var res UpdatePolicyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdatePolicyOKBody update policy o k body
//
// swagger:model UpdatePolicyOKBody
type UpdatePolicyOKBody struct {

	// message
	// Enum: [success]
	Message string `json:"message,omitempty"`
}

// Validate validates this update policy o k body
func (o *UpdatePolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updatePolicyOKBodyTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updatePolicyOKBodyTypeMessagePropEnum = append(updatePolicyOKBodyTypeMessagePropEnum, v)
	}
}

const (

	// UpdatePolicyOKBodyMessageSuccess captures enum value "success"
	UpdatePolicyOKBodyMessageSuccess string = "success"
)

// prop value enum
func (o *UpdatePolicyOKBody) validateMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updatePolicyOKBodyTypeMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePolicyOKBody) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(o.Message) { // not required
		return nil
	}

	// value enum
	if err := o.validateMessageEnum("updatePolicyOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePolicyOKBody) UnmarshalBinary(b []byte) error {
	var res UpdatePolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
