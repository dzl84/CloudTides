// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidateResourceHandlerFunc turns a function with the right signature into a validate resource handler
type ValidateResourceHandlerFunc func(ValidateResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidateResourceHandlerFunc) Handle(params ValidateResourceParams) middleware.Responder {
	return fn(params)
}

// ValidateResourceHandler interface for that can handle valid validate resource params
type ValidateResourceHandler interface {
	Handle(ValidateResourceParams) middleware.Responder
}

// NewValidateResource creates a new http.Handler for the validate resource operation
func NewValidateResource(ctx *middleware.Context, handler ValidateResourceHandler) *ValidateResource {
	return &ValidateResource{Context: ctx, Handler: handler}
}

/*ValidateResource swagger:route GET /resource/validate resource validateResource

returns the list of data centers belonging to the host

*/
type ValidateResource struct {
	Context *middleware.Context
	Handler ValidateResourceHandler
}

func (o *ValidateResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewValidateResourceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ValidateResourceBody validate resource body
//
// swagger:model ValidateResourceBody
type ValidateResourceBody struct {

	// host
	Host string `json:"host,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this validate resource body
func (o *ValidateResourceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateResourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateResourceBody) UnmarshalBinary(b []byte) error {
	var res ValidateResourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ValidateResourceNotFoundBody validate resource not found body
//
// swagger:model ValidateResourceNotFoundBody
type ValidateResourceNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this validate resource not found body
func (o *ValidateResourceNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateResourceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateResourceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ValidateResourceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ValidateResourceOKBody list of data centers belonging to the host
//
// swagger:model ValidateResourceOKBody
type ValidateResourceOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results []string `json:"results"`
}

// Validate validates this validate resource o k body
func (o *ValidateResourceOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateResourceOKBody) UnmarshalBinary(b []byte) error {
	var res ValidateResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
