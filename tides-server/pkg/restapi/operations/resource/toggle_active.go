// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ToggleActiveHandlerFunc turns a function with the right signature into a toggle active handler
type ToggleActiveHandlerFunc func(ToggleActiveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ToggleActiveHandlerFunc) Handle(params ToggleActiveParams) middleware.Responder {
	return fn(params)
}

// ToggleActiveHandler interface for that can handle valid toggle active params
type ToggleActiveHandler interface {
	Handle(ToggleActiveParams) middleware.Responder
}

// NewToggleActive creates a new http.Handler for the toggle active operation
func NewToggleActive(ctx *middleware.Context, handler ToggleActiveHandler) *ToggleActive {
	return &ToggleActive{Context: ctx, Handler: handler}
}

/*ToggleActive swagger:route PUT /resource/toggle_active resource toggleActive

toggle the status of the resource

*/
type ToggleActive struct {
	Context *middleware.Context
	Handler ToggleActiveHandler
}

func (o *ToggleActive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewToggleActiveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ToggleActiveBody toggle active body
//
// swagger:model ToggleActiveBody
type ToggleActiveBody struct {

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this toggle active body
func (o *ToggleActiveBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ToggleActiveBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleActiveBody) UnmarshalBinary(b []byte) error {
	var res ToggleActiveBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ToggleActiveNotFoundBody toggle active not found body
//
// swagger:model ToggleActiveNotFoundBody
type ToggleActiveNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this toggle active not found body
func (o *ToggleActiveNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ToggleActiveNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleActiveNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ToggleActiveNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ToggleActiveOKBody toggle active o k body
//
// swagger:model ToggleActiveOKBody
type ToggleActiveOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this toggle active o k body
func (o *ToggleActiveOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ToggleActiveOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleActiveOKBody) UnmarshalBinary(b []byte) error {
	var res ToggleActiveOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
