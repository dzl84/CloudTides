// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteResourceOKCode is the HTTP code returned for type DeleteResourceOK
const DeleteResourceOKCode int = 200

/*DeleteResourceOK returns success message

swagger:response deleteResourceOK
*/
type DeleteResourceOK struct {

	/*
	  In: Body
	*/
	Payload *DeleteResourceOKBody `json:"body,omitempty"`
}

// NewDeleteResourceOK creates DeleteResourceOK with default headers values
func NewDeleteResourceOK() *DeleteResourceOK {

	return &DeleteResourceOK{}
}

// WithPayload adds the payload to the delete resource o k response
func (o *DeleteResourceOK) WithPayload(payload *DeleteResourceOKBody) *DeleteResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete resource o k response
func (o *DeleteResourceOK) SetPayload(payload *DeleteResourceOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteResourceNotFoundCode is the HTTP code returned for type DeleteResourceNotFound
const DeleteResourceNotFoundCode int = 404

/*DeleteResourceNotFound resource not found

swagger:response deleteResourceNotFound
*/
type DeleteResourceNotFound struct {

	/*
	  In: Body
	*/
	Payload *DeleteResourceNotFoundBody `json:"body,omitempty"`
}

// NewDeleteResourceNotFound creates DeleteResourceNotFound with default headers values
func NewDeleteResourceNotFound() *DeleteResourceNotFound {

	return &DeleteResourceNotFound{}
}

// WithPayload adds the payload to the delete resource not found response
func (o *DeleteResourceNotFound) WithPayload(payload *DeleteResourceNotFoundBody) *DeleteResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete resource not found response
func (o *DeleteResourceNotFound) SetPayload(payload *DeleteResourceNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteResourceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
