// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// UpdateHostOKCode is the HTTP code returned for type UpdateHostOK
const UpdateHostOKCode int = 200

/*UpdateHostOK returns success message

swagger:response updateHostOK
*/
type UpdateHostOK struct {

	/*
	  In: Body
	*/
	Payload *UpdateHostOKBody `json:"body,omitempty"`
}

// NewUpdateHostOK creates UpdateHostOK with default headers values
func NewUpdateHostOK() *UpdateHostOK {

	return &UpdateHostOK{}
}

// WithPayload adds the payload to the update host o k response
func (o *UpdateHostOK) WithPayload(payload *UpdateHostOKBody) *UpdateHostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update host o k response
func (o *UpdateHostOK) SetPayload(payload *UpdateHostOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateHostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateHostNotFoundCode is the HTTP code returned for type UpdateHostNotFound
const UpdateHostNotFoundCode int = 404

/*UpdateHostNotFound resource not found

swagger:response updateHostNotFound
*/
type UpdateHostNotFound struct {

	/*
	  In: Body
	*/
	Payload *UpdateHostNotFoundBody `json:"body,omitempty"`
}

// NewUpdateHostNotFound creates UpdateHostNotFound with default headers values
func NewUpdateHostNotFound() *UpdateHostNotFound {

	return &UpdateHostNotFound{}
}

// WithPayload adds the payload to the update host not found response
func (o *UpdateHostNotFound) WithPayload(payload *UpdateHostNotFoundBody) *UpdateHostNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update host not found response
func (o *UpdateHostNotFound) SetPayload(payload *UpdateHostNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateHostNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
