// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadInstanceFileHandlerFunc turns a function with the right signature into a upload instance file handler
type UploadInstanceFileHandlerFunc func(UploadInstanceFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadInstanceFileHandlerFunc) Handle(params UploadInstanceFileParams) middleware.Responder {
	return fn(params)
}

// UploadInstanceFileHandler interface for that can handle valid upload instance file params
type UploadInstanceFileHandler interface {
	Handle(UploadInstanceFileParams) middleware.Responder
}

// NewUploadInstanceFile creates a new http.Handler for the upload instance file operation
func NewUploadInstanceFile(ctx *middleware.Context, handler UploadInstanceFileHandler) *UploadInstanceFile {
	return &UploadInstanceFile{Context: ctx, Handler: handler}
}

/* UploadInstanceFile swagger:route POST /application/instance/file/{token} application uploadInstanceFile

upload file to instance

*/
type UploadInstanceFile struct {
	Context *middleware.Context
	Handler UploadInstanceFileHandler
}

func (o *UploadInstanceFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadInstanceFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UploadInstanceFileOKBody upload instance file o k body
//
// swagger:model UploadInstanceFileOKBody
type UploadInstanceFileOKBody struct {

	// downlink
	Downlink string `json:"downlink,omitempty"`
}

// Validate validates this upload instance file o k body
func (o *UploadInstanceFileOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload instance file o k body based on context it is used
func (o *UploadInstanceFileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadInstanceFileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadInstanceFileOKBody) UnmarshalBinary(b []byte) error {
	var res UploadInstanceFileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
