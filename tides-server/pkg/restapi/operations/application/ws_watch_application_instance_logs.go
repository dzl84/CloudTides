// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WsWatchApplicationInstanceLogsHandlerFunc turns a function with the right signature into a ws watch application instance logs handler
type WsWatchApplicationInstanceLogsHandlerFunc func(WsWatchApplicationInstanceLogsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WsWatchApplicationInstanceLogsHandlerFunc) Handle(params WsWatchApplicationInstanceLogsParams) middleware.Responder {
	return fn(params)
}

// WsWatchApplicationInstanceLogsHandler interface for that can handle valid ws watch application instance logs params
type WsWatchApplicationInstanceLogsHandler interface {
	Handle(WsWatchApplicationInstanceLogsParams) middleware.Responder
}

// NewWsWatchApplicationInstanceLogs creates a new http.Handler for the ws watch application instance logs operation
func NewWsWatchApplicationInstanceLogs(ctx *middleware.Context, handler WsWatchApplicationInstanceLogsHandler) *WsWatchApplicationInstanceLogs {
	return &WsWatchApplicationInstanceLogs{Context: ctx, Handler: handler}
}

/* WsWatchApplicationInstanceLogs swagger:route GET /ws/application/instance/{token} application wsWatchApplicationInstanceLogs

Websocket Watch application instance logs

*/
type WsWatchApplicationInstanceLogs struct {
	Context *middleware.Context
	Handler WsWatchApplicationInstanceLogsHandler
}

func (o *WsWatchApplicationInstanceLogs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWsWatchApplicationInstanceLogsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
