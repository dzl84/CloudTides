// Code generated by go-swagger; DO NOT EDIT.

package org

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListOrgHandlerFunc turns a function with the right signature into a list org handler
type ListOrgHandlerFunc func(ListOrgParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListOrgHandlerFunc) Handle(params ListOrgParams) middleware.Responder {
	return fn(params)
}

// ListOrgHandler interface for that can handle valid list org params
type ListOrgHandler interface {
	Handle(ListOrgParams) middleware.Responder
}

// NewListOrg creates a new http.Handler for the list org operation
func NewListOrg(ctx *middleware.Context, handler ListOrgHandler) *ListOrg {
	return &ListOrg{Context: ctx, Handler: handler}
}

/* ListOrg swagger:route GET /org org listOrg

list Org

*/
type ListOrg struct {
	Context *middleware.Context
	Handler ListOrgHandler
}

func (o *ListOrg) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListOrgParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListOrgOKBodyItems0 list org o k body items0
//
// swagger:model ListOrgOKBodyItems0
type ListOrgOKBodyItems0 struct {

	// current CPU
	CurrentCPU float64 `json:"CurrentCPU,omitempty"`

	// current disk
	CurrentDisk float64 `json:"CurrentDisk,omitempty"`

	// current RAM
	CurrentRAM float64 `json:"CurrentRAM,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// total CPU
	TotalCPU float64 `json:"totalCPU,omitempty"`

	// total disk
	TotalDisk float64 `json:"totalDisk,omitempty"`

	// total RAM
	TotalRAM float64 `json:"totalRAM,omitempty"`
}

// Validate validates this list org o k body items0
func (o *ListOrgOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list org o k body items0 based on context it is used
func (o *ListOrgOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListOrgOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListOrgOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListOrgOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
