// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListTemplateHandlerFunc turns a function with the right signature into a list template handler
type ListTemplateHandlerFunc func(ListTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListTemplateHandlerFunc) Handle(params ListTemplateParams) middleware.Responder {
	return fn(params)
}

// ListTemplateHandler interface for that can handle valid list template params
type ListTemplateHandler interface {
	Handle(ListTemplateParams) middleware.Responder
}

// NewListTemplate creates a new http.Handler for the list template operation
func NewListTemplate(ctx *middleware.Context, handler ListTemplateHandler) *ListTemplate {
	return &ListTemplate{Context: ctx, Handler: handler}
}

/*ListTemplate swagger:route GET /template/list template listTemplate

list all available VM templates

*/
type ListTemplate struct {
	Context *middleware.Context
	Handler ListTemplateHandler
}

func (o *ListTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListTemplateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListTemplateOKBody list template o k body
//
// swagger:model ListTemplateOKBody
type ListTemplateOKBody struct {

	// message
	// Enum: [success]
	Message string `json:"message,omitempty"`

	// results
	Results []*ResultsItems0 `json:"results"`
}

// Validate validates this list template o k body
func (o *ListTemplateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listTemplateOKBodyTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTemplateOKBodyTypeMessagePropEnum = append(listTemplateOKBodyTypeMessagePropEnum, v)
	}
}

const (

	// ListTemplateOKBodyMessageSuccess captures enum value "success"
	ListTemplateOKBodyMessageSuccess string = "success"
)

// prop value enum
func (o *ListTemplateOKBody) validateMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listTemplateOKBodyTypeMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ListTemplateOKBody) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(o.Message) { // not required
		return nil
	}

	// value enum
	if err := o.validateMessageEnum("listTemplateOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *ListTemplateOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTemplateOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTemplateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTemplateOKBody) UnmarshalBinary(b []byte) error {
	var res ListTemplateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ResultsItems0 results items0
//
// swagger:model ResultsItems0
type ResultsItems0 struct {

	// compatibility
	Compatibility string `json:"compatibility,omitempty"`

	// date added
	DateAdded string `json:"dateAdded,omitempty"`

	// guest o s
	GuestOS string `json:"guestOS,omitempty"`

	// memory size
	MemorySize float64 `json:"memorySize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provisioned space
	ProvisionedSpace float64 `json:"provisionedSpace,omitempty"`

	// template type
	// Enum: [datastore upload]
	TemplateType string `json:"templateType,omitempty"`
}

// Validate validates this results items0
func (o *ResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTemplateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resultsItems0TypeTemplateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["datastore","upload"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resultsItems0TypeTemplateTypePropEnum = append(resultsItems0TypeTemplateTypePropEnum, v)
	}
}

const (

	// ResultsItems0TemplateTypeDatastore captures enum value "datastore"
	ResultsItems0TemplateTypeDatastore string = "datastore"

	// ResultsItems0TemplateTypeUpload captures enum value "upload"
	ResultsItems0TemplateTypeUpload string = "upload"
)

// prop value enum
func (o *ResultsItems0) validateTemplateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resultsItems0TypeTemplateTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ResultsItems0) validateTemplateType(formats strfmt.Registry) error {

	if swag.IsZero(o.TemplateType) { // not required
		return nil
	}

	// value enum
	if err := o.validateTemplateTypeEnum("templateType", "body", o.TemplateType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResultsItems0) UnmarshalBinary(b []byte) error {
	var res ResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
