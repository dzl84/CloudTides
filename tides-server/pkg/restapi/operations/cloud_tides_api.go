// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tides-server/pkg/restapi/operations/policy"
	"tides-server/pkg/restapi/operations/resource"
	"tides-server/pkg/restapi/operations/template"
	"tides-server/pkg/restapi/operations/usage"
	"tides-server/pkg/restapi/operations/user"
)

// NewCloudTidesAPI creates a new CloudTides instance
func NewCloudTidesAPI(spec *loads.Document) *CloudTidesAPI {
	return &CloudTidesAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		PolicyAddPolicyHandler: policy.AddPolicyHandlerFunc(func(params policy.AddPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy.AddPolicy has not yet been implemented")
		}),
		ResourceAddResourceHandler: resource.AddResourceHandlerFunc(func(params resource.AddResourceParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.AddResource has not yet been implemented")
		}),
		UsageAddResourceUsageHandler: usage.AddResourceUsageHandlerFunc(func(params usage.AddResourceUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation usage.AddResourceUsage has not yet been implemented")
		}),
		TemplateAddTemplateHandler: template.AddTemplateHandlerFunc(func(params template.AddTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.AddTemplate has not yet been implemented")
		}),
		UsageAddVMUsageHandler: usage.AddVMUsageHandlerFunc(func(params usage.AddVMUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation usage.AddVMUsage has not yet been implemented")
		}),
		ResourceAssignPolicyHandler: resource.AssignPolicyHandlerFunc(func(params resource.AssignPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.AssignPolicy has not yet been implemented")
		}),
		ResourceDeleteResourceHandler: resource.DeleteResourceHandlerFunc(func(params resource.DeleteResourceParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.DeleteResource has not yet been implemented")
		}),
		UsageDeleteResourceUsageHandler: usage.DeleteResourceUsageHandlerFunc(func(params usage.DeleteResourceUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation usage.DeleteResourceUsage has not yet been implemented")
		}),
		TemplateDeleteTemplateHandler: template.DeleteTemplateHandlerFunc(func(params template.DeleteTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.DeleteTemplate has not yet been implemented")
		}),
		ResourceDestroyVMHandler: resource.DestroyVMHandlerFunc(func(params resource.DestroyVMParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.DestroyVM has not yet been implemented")
		}),
		PolicyListPolicyHandler: policy.ListPolicyHandlerFunc(func(params policy.ListPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy.ListPolicy has not yet been implemented")
		}),
		ResourceListResourceHandler: resource.ListResourceHandlerFunc(func(params resource.ListResourceParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.ListResource has not yet been implemented")
		}),
		TemplateListTemplateHandler: template.ListTemplateHandlerFunc(func(params template.ListTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation template.ListTemplate has not yet been implemented")
		}),
		ResourceOverviewStatsHandler: resource.OverviewStatsHandlerFunc(func(params resource.OverviewStatsParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.OverviewStats has not yet been implemented")
		}),
		UserRegisterUserHandler: user.RegisterUserHandlerFunc(func(params user.RegisterUserParams) middleware.Responder {
			return middleware.NotImplemented("operation user.RegisterUser has not yet been implemented")
		}),
		PolicyRemovePolicyHandler: policy.RemovePolicyHandlerFunc(func(params policy.RemovePolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy.RemovePolicy has not yet been implemented")
		}),
		ResourceResourceInfoHandler: resource.ResourceInfoHandlerFunc(func(params resource.ResourceInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.ResourceInfo has not yet been implemented")
		}),
		UsageResourcePastUsageHandler: usage.ResourcePastUsageHandlerFunc(func(params usage.ResourcePastUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation usage.ResourcePastUsage has not yet been implemented")
		}),
		ResourceResourceVMsInfoHandler: resource.ResourceVMsInfoHandlerFunc(func(params resource.ResourceVMsInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.ResourceVMsInfo has not yet been implemented")
		}),
		ResourceToggleActiveHandler: resource.ToggleActiveHandlerFunc(func(params resource.ToggleActiveParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.ToggleActive has not yet been implemented")
		}),
		PolicyUpdatePolicyHandler: policy.UpdatePolicyHandlerFunc(func(params policy.UpdatePolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy.UpdatePolicy has not yet been implemented")
		}),
		ResourceUpdateResourceHandler: resource.UpdateResourceHandlerFunc(func(params resource.UpdateResourceParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.UpdateResource has not yet been implemented")
		}),
		UsageUpdateResourceUsageHandler: usage.UpdateResourceUsageHandlerFunc(func(params usage.UpdateResourceUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation usage.UpdateResourceUsage has not yet been implemented")
		}),
		UserUserDetailsHandler: user.UserDetailsHandlerFunc(func(params user.UserDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation user.UserDetails has not yet been implemented")
		}),
		UserUserLoginHandler: user.UserLoginHandlerFunc(func(params user.UserLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation user.UserLogin has not yet been implemented")
		}),
		ResourceValidateResourceHandler: resource.ValidateResourceHandlerFunc(func(params resource.ValidateResourceParams) middleware.Responder {
			return middleware.NotImplemented("operation resource.ValidateResource has not yet been implemented")
		}),
	}
}

/*CloudTidesAPI the cloud tides API */
type CloudTidesAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// PolicyAddPolicyHandler sets the operation handler for the add policy operation
	PolicyAddPolicyHandler policy.AddPolicyHandler
	// ResourceAddResourceHandler sets the operation handler for the add resource operation
	ResourceAddResourceHandler resource.AddResourceHandler
	// UsageAddResourceUsageHandler sets the operation handler for the add resource usage operation
	UsageAddResourceUsageHandler usage.AddResourceUsageHandler
	// TemplateAddTemplateHandler sets the operation handler for the add template operation
	TemplateAddTemplateHandler template.AddTemplateHandler
	// UsageAddVMUsageHandler sets the operation handler for the add VM usage operation
	UsageAddVMUsageHandler usage.AddVMUsageHandler
	// ResourceAssignPolicyHandler sets the operation handler for the assign policy operation
	ResourceAssignPolicyHandler resource.AssignPolicyHandler
	// ResourceDeleteResourceHandler sets the operation handler for the delete resource operation
	ResourceDeleteResourceHandler resource.DeleteResourceHandler
	// UsageDeleteResourceUsageHandler sets the operation handler for the delete resource usage operation
	UsageDeleteResourceUsageHandler usage.DeleteResourceUsageHandler
	// TemplateDeleteTemplateHandler sets the operation handler for the delete template operation
	TemplateDeleteTemplateHandler template.DeleteTemplateHandler
	// ResourceDestroyVMHandler sets the operation handler for the destroy VM operation
	ResourceDestroyVMHandler resource.DestroyVMHandler
	// PolicyListPolicyHandler sets the operation handler for the list policy operation
	PolicyListPolicyHandler policy.ListPolicyHandler
	// ResourceListResourceHandler sets the operation handler for the list resource operation
	ResourceListResourceHandler resource.ListResourceHandler
	// TemplateListTemplateHandler sets the operation handler for the list template operation
	TemplateListTemplateHandler template.ListTemplateHandler
	// ResourceOverviewStatsHandler sets the operation handler for the overview stats operation
	ResourceOverviewStatsHandler resource.OverviewStatsHandler
	// UserRegisterUserHandler sets the operation handler for the register user operation
	UserRegisterUserHandler user.RegisterUserHandler
	// PolicyRemovePolicyHandler sets the operation handler for the remove policy operation
	PolicyRemovePolicyHandler policy.RemovePolicyHandler
	// ResourceResourceInfoHandler sets the operation handler for the resource info operation
	ResourceResourceInfoHandler resource.ResourceInfoHandler
	// UsageResourcePastUsageHandler sets the operation handler for the resource past usage operation
	UsageResourcePastUsageHandler usage.ResourcePastUsageHandler
	// ResourceResourceVMsInfoHandler sets the operation handler for the resource v ms info operation
	ResourceResourceVMsInfoHandler resource.ResourceVMsInfoHandler
	// ResourceToggleActiveHandler sets the operation handler for the toggle active operation
	ResourceToggleActiveHandler resource.ToggleActiveHandler
	// PolicyUpdatePolicyHandler sets the operation handler for the update policy operation
	PolicyUpdatePolicyHandler policy.UpdatePolicyHandler
	// ResourceUpdateResourceHandler sets the operation handler for the update resource operation
	ResourceUpdateResourceHandler resource.UpdateResourceHandler
	// UsageUpdateResourceUsageHandler sets the operation handler for the update resource usage operation
	UsageUpdateResourceUsageHandler usage.UpdateResourceUsageHandler
	// UserUserDetailsHandler sets the operation handler for the user details operation
	UserUserDetailsHandler user.UserDetailsHandler
	// UserUserLoginHandler sets the operation handler for the user login operation
	UserUserLoginHandler user.UserLoginHandler
	// ResourceValidateResourceHandler sets the operation handler for the validate resource operation
	ResourceValidateResourceHandler resource.ValidateResourceHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *CloudTidesAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CloudTidesAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CloudTidesAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CloudTidesAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CloudTidesAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CloudTidesAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CloudTidesAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CloudTidesAPI
func (o *CloudTidesAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.PolicyAddPolicyHandler == nil {
		unregistered = append(unregistered, "policy.AddPolicyHandler")
	}
	if o.ResourceAddResourceHandler == nil {
		unregistered = append(unregistered, "resource.AddResourceHandler")
	}
	if o.UsageAddResourceUsageHandler == nil {
		unregistered = append(unregistered, "usage.AddResourceUsageHandler")
	}
	if o.TemplateAddTemplateHandler == nil {
		unregistered = append(unregistered, "template.AddTemplateHandler")
	}
	if o.UsageAddVMUsageHandler == nil {
		unregistered = append(unregistered, "usage.AddVMUsageHandler")
	}
	if o.ResourceAssignPolicyHandler == nil {
		unregistered = append(unregistered, "resource.AssignPolicyHandler")
	}
	if o.ResourceDeleteResourceHandler == nil {
		unregistered = append(unregistered, "resource.DeleteResourceHandler")
	}
	if o.UsageDeleteResourceUsageHandler == nil {
		unregistered = append(unregistered, "usage.DeleteResourceUsageHandler")
	}
	if o.TemplateDeleteTemplateHandler == nil {
		unregistered = append(unregistered, "template.DeleteTemplateHandler")
	}
	if o.ResourceDestroyVMHandler == nil {
		unregistered = append(unregistered, "resource.DestroyVMHandler")
	}
	if o.PolicyListPolicyHandler == nil {
		unregistered = append(unregistered, "policy.ListPolicyHandler")
	}
	if o.ResourceListResourceHandler == nil {
		unregistered = append(unregistered, "resource.ListResourceHandler")
	}
	if o.TemplateListTemplateHandler == nil {
		unregistered = append(unregistered, "template.ListTemplateHandler")
	}
	if o.ResourceOverviewStatsHandler == nil {
		unregistered = append(unregistered, "resource.OverviewStatsHandler")
	}
	if o.UserRegisterUserHandler == nil {
		unregistered = append(unregistered, "user.RegisterUserHandler")
	}
	if o.PolicyRemovePolicyHandler == nil {
		unregistered = append(unregistered, "policy.RemovePolicyHandler")
	}
	if o.ResourceResourceInfoHandler == nil {
		unregistered = append(unregistered, "resource.ResourceInfoHandler")
	}
	if o.UsageResourcePastUsageHandler == nil {
		unregistered = append(unregistered, "usage.ResourcePastUsageHandler")
	}
	if o.ResourceResourceVMsInfoHandler == nil {
		unregistered = append(unregistered, "resource.ResourceVMsInfoHandler")
	}
	if o.ResourceToggleActiveHandler == nil {
		unregistered = append(unregistered, "resource.ToggleActiveHandler")
	}
	if o.PolicyUpdatePolicyHandler == nil {
		unregistered = append(unregistered, "policy.UpdatePolicyHandler")
	}
	if o.ResourceUpdateResourceHandler == nil {
		unregistered = append(unregistered, "resource.UpdateResourceHandler")
	}
	if o.UsageUpdateResourceUsageHandler == nil {
		unregistered = append(unregistered, "usage.UpdateResourceUsageHandler")
	}
	if o.UserUserDetailsHandler == nil {
		unregistered = append(unregistered, "user.UserDetailsHandler")
	}
	if o.UserUserLoginHandler == nil {
		unregistered = append(unregistered, "user.UserLoginHandler")
	}
	if o.ResourceValidateResourceHandler == nil {
		unregistered = append(unregistered, "resource.ValidateResourceHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CloudTidesAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CloudTidesAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *CloudTidesAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *CloudTidesAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *CloudTidesAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CloudTidesAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the cloud tides API
func (o *CloudTidesAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CloudTidesAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/policy/add"] = policy.NewAddPolicy(o.context, o.PolicyAddPolicyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/resource/add"] = resource.NewAddResource(o.context, o.ResourceAddResourceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/usage/add_resource"] = usage.NewAddResourceUsage(o.context, o.UsageAddResourceUsageHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/template/add"] = template.NewAddTemplate(o.context, o.TemplateAddTemplateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/usage/addVM"] = usage.NewAddVMUsage(o.context, o.UsageAddVMUsageHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/resource/assign_policy"] = resource.NewAssignPolicy(o.context, o.ResourceAssignPolicyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/resource/delete"] = resource.NewDeleteResource(o.context, o.ResourceDeleteResourceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/usage/delete_resource"] = usage.NewDeleteResourceUsage(o.context, o.UsageDeleteResourceUsageHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/template/delete"] = template.NewDeleteTemplate(o.context, o.TemplateDeleteTemplateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/resource/destroy_vm"] = resource.NewDestroyVM(o.context, o.ResourceDestroyVMHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policy/list"] = policy.NewListPolicy(o.context, o.PolicyListPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resource/list"] = resource.NewListResource(o.context, o.ResourceListResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/template/list"] = template.NewListTemplate(o.context, o.TemplateListTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resource/overview"] = resource.NewOverviewStats(o.context, o.ResourceOverviewStatsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/register"] = user.NewRegisterUser(o.context, o.UserRegisterUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/policy/remove"] = policy.NewRemovePolicy(o.context, o.PolicyRemovePolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resource/get_details"] = resource.NewResourceInfo(o.context, o.ResourceResourceInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/usage/getUsage"] = usage.NewResourcePastUsage(o.context, o.UsageResourcePastUsageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resource/get_vm_details"] = resource.NewResourceVMsInfo(o.context, o.ResourceResourceVMsInfoHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/resource/toggle_active"] = resource.NewToggleActive(o.context, o.ResourceToggleActiveHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/policy/update"] = policy.NewUpdatePolicy(o.context, o.PolicyUpdatePolicyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/resource/update"] = resource.NewUpdateResource(o.context, o.ResourceUpdateResourceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/usage/update_resource"] = usage.NewUpdateResourceUsage(o.context, o.UsageUpdateResourceUsageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/get_details"] = user.NewUserDetails(o.context, o.UserUserDetailsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/login"] = user.NewUserLogin(o.context, o.UserUserLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resource/validate"] = resource.NewValidateResource(o.context, o.ResourceValidateResourceHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CloudTidesAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *CloudTidesAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *CloudTidesAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *CloudTidesAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *CloudTidesAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
