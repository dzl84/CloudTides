// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryHostInfoHandlerFunc turns a function with the right signature into a query host info handler
type QueryHostInfoHandlerFunc func(QueryHostInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn QueryHostInfoHandlerFunc) Handle(params QueryHostInfoParams) middleware.Responder {
	return fn(params)
}

// QueryHostInfoHandler interface for that can handle valid query host info params
type QueryHostInfoHandler interface {
	Handle(QueryHostInfoParams) middleware.Responder
}

// NewQueryHostInfo creates a new http.Handler for the query host info operation
func NewQueryHostInfo(ctx *middleware.Context, handler QueryHostInfoHandler) *QueryHostInfo {
	return &QueryHostInfo{Context: ctx, Handler: handler}
}

/* QueryHostInfo swagger:route GET /hostsStatus hosts queryHostInfo

QueryHostInfo query host info API

*/
type QueryHostInfo struct {
	Context *middleware.Context
	Handler QueryHostInfoHandler
}

func (o *QueryHostInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewQueryHostInfoParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// QueryHostInfoOKBodyItems0 query host info o k body items0
//
// swagger:model QueryHostInfoOKBodyItems0
type QueryHostInfoOKBodyItems0 struct {

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// ip
	// Min Length: 1
	IP string `json:"ip,omitempty"`
}

// Validate validates this query host info o k body items0
func (o *QueryHostInfoOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryHostInfoOKBodyItems0) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(o.IP) { // not required
		return nil
	}

	if err := validate.MinLength("ip", "body", o.IP, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this query host info o k body items0 based on the context it is used
func (o *QueryHostInfoOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryHostInfoOKBodyItems0) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(o.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryHostInfoOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryHostInfoOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res QueryHostInfoOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
