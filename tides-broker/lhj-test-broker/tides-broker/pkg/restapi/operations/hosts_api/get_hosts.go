// Code generated by go-swagger; DO NOT EDIT.

package hosts_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetHostsHandlerFunc turns a function with the right signature into a get hosts handler
type GetHostsHandlerFunc func(GetHostsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHostsHandlerFunc) Handle(params GetHostsParams) middleware.Responder {
	return fn(params)
}

// GetHostsHandler interface for that can handle valid get hosts params
type GetHostsHandler interface {
	Handle(GetHostsParams) middleware.Responder
}

// NewGetHosts creates a new http.Handler for the get hosts operation
func NewGetHosts(ctx *middleware.Context, handler GetHostsHandler) *GetHosts {
	return &GetHosts{Context: ctx, Handler: handler}
}

/* GetHosts swagger:route GET /getHosts hosts_api getHosts

returns all machines belong to a user

*/
type GetHosts struct {
	Context *middleware.Context
	Handler GetHostsHandler
}

func (o *GetHosts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHostsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetHostsBadRequestBody get hosts bad request body
//
// swagger:model GetHostsBadRequestBody
type GetHostsBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get hosts bad request body
func (o *GetHostsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get hosts bad request body based on context it is used
func (o *GetHostsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetHostsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHostsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetHostsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetHostsOKBody get hosts o k body
//
// swagger:model GetHostsOKBody
type GetHostsOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results []*GetHostsOKBodyResultsItems0 `json:"results"`
}

// Validate validates this get hosts o k body
func (o *GetHostsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHostsOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHostsOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHostsOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get hosts o k body based on the context it is used
func (o *GetHostsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHostsOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {
			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHostsOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHostsOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetHostsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHostsOKBody) UnmarshalBinary(b []byte) error {
	var res GetHostsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetHostsOKBodyResultsItems0 get hosts o k body results items0
//
// swagger:model GetHostsOKBodyResultsItems0
type GetHostsOKBodyResultsItems0 struct {

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// datacenter
	Datacenter string `json:"datacenter,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// policy
	Policy int64 `json:"policy,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// sshkey
	Sshkey string `json:"sshkey,omitempty"`
}

// Validate validates this get hosts o k body results items0
func (o *GetHostsOKBodyResultsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get hosts o k body results items0 based on context it is used
func (o *GetHostsOKBodyResultsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetHostsOKBodyResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHostsOKBodyResultsItems0) UnmarshalBinary(b []byte) error {
	var res GetHostsOKBodyResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
