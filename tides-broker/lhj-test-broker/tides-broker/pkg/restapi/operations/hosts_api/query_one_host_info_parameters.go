// Code generated by go-swagger; DO NOT EDIT.

package hosts_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewQueryOneHostInfoParams creates a new QueryOneHostInfoParams object
//
// There are no default values defined in the spec.
func NewQueryOneHostInfoParams() QueryOneHostInfoParams {

	return QueryOneHostInfoParams{}
}

// QueryOneHostInfoParams contains all the bound params for the query one host info operation
// typically these are obtained from a http.Request
//
// swagger:parameters queryOneHostInfo
type QueryOneHostInfoParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Hostname *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewQueryOneHostInfoParams() beforehand.
func (o *QueryOneHostInfoParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qHostname, qhkHostname, _ := qs.GetOK("hostname")
	if err := o.bindHostname(qHostname, qhkHostname, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindHostname binds and validates parameter Hostname from query.
func (o *QueryOneHostInfoParams) bindHostname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Hostname = &raw

	return nil
}
