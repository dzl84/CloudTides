// Code generated by go-swagger; DO NOT EDIT.

package hosts_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddOneHostHandlerFunc turns a function with the right signature into a add one host handler
type AddOneHostHandlerFunc func(AddOneHostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddOneHostHandlerFunc) Handle(params AddOneHostParams) middleware.Responder {
	return fn(params)
}

// AddOneHostHandler interface for that can handle valid add one host params
type AddOneHostHandler interface {
	Handle(AddOneHostParams) middleware.Responder
}

// NewAddOneHost creates a new http.Handler for the add one host operation
func NewAddOneHost(ctx *middleware.Context, handler AddOneHostHandler) *AddOneHost {
	return &AddOneHost{Context: ctx, Handler: handler}
}

/* AddOneHost swagger:route POST /addHost hosts_api addOneHost

add a local machine to webserver database

*/
type AddOneHost struct {
	Context *middleware.Context
	Handler AddOneHostHandler
}

func (o *AddOneHost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddOneHostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddOneHostBadRequestBody add one host bad request body
//
// swagger:model AddOneHostBadRequestBody
type AddOneHostBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add one host bad request body
func (o *AddOneHostBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add one host bad request body based on context it is used
func (o *AddOneHostBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddOneHostBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOneHostBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AddOneHostBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddOneHostBody local machine registration form
//
// swagger:model AddOneHostBody
type AddOneHostBody struct {

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// datacenter
	Datacenter string `json:"datacenter,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// policy
	Policy int64 `json:"policy,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// sshkey
	Sshkey string `json:"sshkey,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this add one host body
func (o *AddOneHostBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add one host body based on context it is used
func (o *AddOneHostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddOneHostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOneHostBody) UnmarshalBinary(b []byte) error {
	var res AddOneHostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddOneHostCreatedBody add one host created body
//
// swagger:model AddOneHostCreatedBody
type AddOneHostCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add one host created body
func (o *AddOneHostCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add one host created body based on context it is used
func (o *AddOneHostCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddOneHostCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOneHostCreatedBody) UnmarshalBinary(b []byte) error {
	var res AddOneHostCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
